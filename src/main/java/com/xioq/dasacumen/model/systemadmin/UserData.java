package com.xioq.dasacumen.model.systemadmin;

// Generated 06-May-2014 08:44:39 by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Proxy;

import com.xioq.dasacumen.lib.model.VersionControlled;
import com.xioq.dasacumen.model.common.UserDataSets;
import com.xioq.dasacumen.model.constants.EntityType;

/**
 * UserData generated by hbm2java
 */
@Entity
@Proxy(lazy=false)
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE, region="userDataCache")
@Table(name = "user_data")
public class UserData extends VersionControlled implements java.io.Serializable {
	
	private static final long serialVersionUID = -5369863056958664620L;
	
	@Id
	@SequenceGenerator(allocationSize=1, initialValue=0, sequenceName="user_data_id_seq", name="user_data_id_seq")
	@GeneratedValue(generator="user_data_id_seq", strategy=GenerationType.SEQUENCE)
	@Column(name="id")
	private Long id;
	
	@Column(name="user_data_types_id", updatable = false, nullable=false)
	private Long userDataTypeId;
	
	@JsonIgnore
	@ManyToOne(optional=false)
    @JoinColumn(name="user_data_types_id", insertable = false, updatable = false, nullable=false)
	// TODO These are not being loaded from Cache!!
	private UserDataTypes userDataTypes;
	
	private String name;
	private String value;
	private Integer udOrder;
	private Boolean active;
	
	@JsonIgnore
	@OneToMany(orphanRemoval = true, cascade = {})
    @JoinColumn(name="id")
	private Set<UserDataSets> userDataSets = new HashSet<UserDataSets>(0);
	
	@JsonIgnore
	@Transient // TODO Either this is a Many to Many or a one to many to many to one
	/* But for many to many there cannot be additional fields on the join - update date etc.. */
	//@ManyToMany( cascade = {CascadeType.ALL})
	//@JoinTable(name="user_data_links")
   // @JoinColumn(name="id")
	private Set<UserData> descendantUserData = new HashSet<UserData>(0);

	public UserData() {
	}

	public UserData(Long id, UserDataTypes userDataTypes) {
		this.id = id;
		this.userDataTypes = userDataTypes;
	}

	public UserData(Long id, UserDataTypes userDataTypes, String name, String value,
			Integer udOrder, Boolean active, Set<UserDataSets> userDataSets,
			Set<UserData> descendantUserData) {
		this.id = id;
		this.userDataTypes = userDataTypes;
		this.name = name;
		this.value = value;
		this.udOrder = udOrder;
		this.active = active;
		this.userDataSets = userDataSets;
		this.descendantUserData = descendantUserData;
	}

    @Override
    public EntityType getModelType()
    {
    	return EntityType.USER_DATA;
    }
    
	@Override
	public String toString()
	{
		return "UserData [id=" + id + ", userDataTypeId=" + userDataTypeId + ", name=" + name + ", value=" + value + "]";
	}

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public UserDataTypes getUserDataTypes() {
		return this.userDataTypes;
	}

	public void setUserDataTypes(UserDataTypes userDataTypes) {
		this.userDataTypes = userDataTypes;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getUdOrder() {
		return this.udOrder;
	}

	public void setUdOrder(Integer udOrder) {
		this.udOrder = udOrder;
	}

	public Boolean getActive() {
		return this.active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	public Set<UserDataSets> getUserDataSets() {
		return this.userDataSets;
	}

	public void setUserDataSets(Set<UserDataSets> userDataSets) {
		this.userDataSets = userDataSets;
	}
	
	/**
	 * Get all related user data in user data links table.
	 * @return set with returned user data.
	 */
	public Set<UserData> getDescendantUserData() {
		return this.descendantUserData;
	}

	/**
	 * Set all related user data in user data links table.
	 */
	public void setDescendantUserData(Set<UserData> descendantUserData) {
		this.descendantUserData = descendantUserData;
	}
	public void addDescendantUserData(UserData descendantUserData) {
		this.descendantUserData.add(descendantUserData);
	}

	public Long getUserDataTypeId()
	{
		return userDataTypeId;
	}

	public void setUserDataTypeId(Long userDataTypesId)
	{
		this.userDataTypeId = userDataTypesId;
	}

	/**
	 * Only should be retrived if its user data type has valueRequired = true.
	 * @return the value related to the userdata.
	 */
	public String getValue() {
		return value;
	}

	/**
	 * Only should be used if its user data type has valueRequired = true.
	 * @param value the value to set related to the userdata.
	 */
	public void setValue(String value) {
		this.value = value;
	}
}
